/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IEOInterface extends utils.Interface {
  functions: {
    "AIBOT()": FunctionFragment;
    "BRT()": FunctionFragment;
    "USDT()": FunctionFragment;
    "aibotTotalAmount()": FunctionFragment;
    "brtTotalAmount()": FunctionFragment;
    "claim()": FunctionFragment;
    "create(uint256,uint256,uint256,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositDeadline()": FunctionFragment;
    "depositPerRate()": FunctionFragment;
    "deposits(address)": FunctionFragment;
    "fundraisingAmount()": FunctionFragment;
    "getFinalAllocation(address)": FunctionFragment;
    "getPurchaseAmount(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentDeadline()": FunctionFragment;
    "payments(address)": FunctionFragment;
    "price()": FunctionFragment;
    "purchase(uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "startTime()": FunctionFragment;
    "usdtTotalAmount()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AIBOT"
      | "BRT"
      | "USDT"
      | "aibotTotalAmount"
      | "brtTotalAmount"
      | "claim"
      | "create"
      | "deposit"
      | "depositDeadline"
      | "depositPerRate"
      | "deposits"
      | "fundraisingAmount"
      | "getFinalAllocation"
      | "getPurchaseAmount"
      | "owner"
      | "paymentDeadline"
      | "payments"
      | "price"
      | "purchase"
      | "setOwner"
      | "startTime"
      | "usdtTotalAmount"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AIBOT", values?: undefined): string;
  encodeFunctionData(functionFragment: "BRT", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aibotTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "brtTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositPerRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fundraisingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalAllocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchaseAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "payments", values: [string]): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdtTotalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(functionFragment: "AIBOT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BRT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aibotTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brtTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositPerRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundraisingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdtTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Claimed(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Created(address,uint256,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "Purchased(address,address,uint256)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ClaimedEventObject {
  sender: string;
  aibotAmount: BigNumber;
  brtAmount: BigNumber;
  usdtAmount: BigNumber;
  payment: BigNumber;
  refund: BigNumber;
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface CreatedEventObject {
  sender: string;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type CreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CreatedEventObject
>;

export type CreatedEventFilter = TypedEventFilter<CreatedEvent>;

export interface DepositEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<
  [string, string],
  OwnerChangedEventObject
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface PurchasedEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
}
export type PurchasedEvent = TypedEvent<
  [string, string, BigNumber],
  PurchasedEventObject
>;

export type PurchasedEventFilter = TypedEventFilter<PurchasedEvent>;

export interface WithdrawnEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface IEO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AIBOT(overrides?: CallOverrides): Promise<[string]>;

    BRT(overrides?: CallOverrides): Promise<[string]>;

    USDT(overrides?: CallOverrides): Promise<[string]>;

    aibotTotalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    brtTotalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    create(
      _brtBalance: BigNumberish,
      _usdtBalance: BigNumberish,
      _perRate: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositDeadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositPerRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    fundraisingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFinalAllocation(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        aibotAmount: BigNumber;
        brtAmount: BigNumber;
        usdtAmount: BigNumber;
        payment: BigNumber;
        refund: BigNumber;
      }
    >;

    getPurchaseAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentDeadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    payments(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchase(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    usdtTotalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  AIBOT(overrides?: CallOverrides): Promise<string>;

  BRT(overrides?: CallOverrides): Promise<string>;

  USDT(overrides?: CallOverrides): Promise<string>;

  aibotTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  brtTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  create(
    _brtBalance: BigNumberish,
    _usdtBalance: BigNumberish,
    _perRate: BigNumberish,
    _startTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositDeadline(overrides?: CallOverrides): Promise<BigNumber>;

  depositPerRate(overrides?: CallOverrides): Promise<BigNumber>;

  deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  fundraisingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getFinalAllocation(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      aibotAmount: BigNumber;
      brtAmount: BigNumber;
      usdtAmount: BigNumber;
      payment: BigNumber;
      refund: BigNumber;
    }
  >;

  getPurchaseAmount(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentDeadline(overrides?: CallOverrides): Promise<BigNumber>;

  payments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  purchase(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  usdtTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    AIBOT(overrides?: CallOverrides): Promise<string>;

    BRT(overrides?: CallOverrides): Promise<string>;

    USDT(overrides?: CallOverrides): Promise<string>;

    aibotTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    brtTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    create(
      _brtBalance: BigNumberish,
      _usdtBalance: BigNumberish,
      _perRate: BigNumberish,
      _startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    depositPerRate(overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fundraisingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getFinalAllocation(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        aibotAmount: BigNumber;
        brtAmount: BigNumber;
        usdtAmount: BigNumber;
        payment: BigNumber;
        refund: BigNumber;
      }
    >;

    getPurchaseAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    payments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    usdtTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(to: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Claimed(address,uint256,uint256,uint256,uint256,uint256)"(
      sender?: string | null,
      aibotAmount?: null,
      brtAmount?: null,
      usdtAmount?: null,
      payment?: null,
      refund?: null
    ): ClaimedEventFilter;
    Claimed(
      sender?: string | null,
      aibotAmount?: null,
      brtAmount?: null,
      usdtAmount?: null,
      payment?: null,
      refund?: null
    ): ClaimedEventFilter;

    "Created(address,uint256,uint256)"(
      sender?: string | null,
      amount0?: null,
      amount1?: null
    ): CreatedEventFilter;
    Created(
      sender?: string | null,
      amount0?: null,
      amount1?: null
    ): CreatedEventFilter;

    "Deposit(address,address,uint256)"(
      sender?: string | null,
      token?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      token?: string | null,
      amount?: null
    ): DepositEventFilter;

    "OwnerChanged(address,address)"(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnerChangedEventFilter;
    OwnerChanged(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnerChangedEventFilter;

    "Purchased(address,address,uint256)"(
      sender?: string | null,
      token?: string | null,
      amount?: null
    ): PurchasedEventFilter;
    Purchased(
      sender?: string | null,
      token?: string | null,
      amount?: null
    ): PurchasedEventFilter;

    "Withdrawn(address,address,uint256)"(
      sender?: string | null,
      token?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      sender?: string | null,
      token?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    AIBOT(overrides?: CallOverrides): Promise<BigNumber>;

    BRT(overrides?: CallOverrides): Promise<BigNumber>;

    USDT(overrides?: CallOverrides): Promise<BigNumber>;

    aibotTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    brtTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    create(
      _brtBalance: BigNumberish,
      _usdtBalance: BigNumberish,
      _perRate: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    depositPerRate(overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fundraisingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getFinalAllocation(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPurchaseAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    payments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    usdtTotalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AIBOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BRT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aibotTotalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    brtTotalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    create(
      _brtBalance: BigNumberish,
      _usdtBalance: BigNumberish,
      _perRate: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositDeadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositPerRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundraisingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFinalAllocation(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPurchaseAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentDeadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdtTotalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
